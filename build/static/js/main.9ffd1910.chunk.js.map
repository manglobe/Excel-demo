{"version":3,"sources":["components/Table/Table.module.css","components/Cell/Cell.module.css","components/SortCell/SortCell.module.css","components/Cell/Cell.tsx","components/Cell/index.tsx","components/Table/Table.tsx","components/Table/index.tsx","components/SortCell/SortCell.tsx","components/SortCell/index.tsx","tools/strEval.ts","tools/sortGrid.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","table","tbody","thead","cell","editor","sortCell","up","down","CellEditor","_ref","visible","value","onChange","onConfirm","onCancel","inputRef","react_default","a","createElement","ref","className","style","type","onKeyDown","e","keyCode","Cell","wrapDom","editorDom","state","EditMode","editValue","enterEditMod","_this","setState","props","window","addEventListener","addLeaveEditListener","focus","contains","target","leaveEditMod","needSaveValue","nextValue","removeEventListener","onEditHandle","val","_this2","this","view","onDoubleClick","el","React","PureComponent","Thead","columns","map","column","key","id","thContent","Tbody","_ref2","data","rowEle","rowIndex","tdRender","Table","_this$props","getNextDirection","current","console","error","SortCell","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sortHandle","nextDirection","direction","defaultValue","concat","onClick","children","operatorFunctions","+","b","Number","-","*","/","%","^","Math","pow","checkWordType","str","test","Error","priorityMap","Stack","arr","stack","push","_this$stack$push","_len","arguments","length","args","Array","_key","apply","pop","get","number","popUntil","func","poped","top","evalStr","afterExpressArr","match","i","_loop","currentWord","stackTop","stackOperator","hasOwnProperty","forEach","operator","translateMidExpress2AfterExpressArr","top2","result","transpose","grid","newGrid","j","sortGrid","index","isRow","sortFunc","clonedGrid","JSON","parse","stringify","sort","_grid","createEmptyGrid","fill","sortFuncs","_findUnEmpty","findUnEmpty","toConsumableArray","collect","indexCollect","ele","_findUnEmpty2","dealValue2View","strEval","substr","App","sortQueue","cellChangeHandle","colIndex","nextVal","changeData","x","y","onSort","sortType","findedIndex","findIndex","nextSortItem","splice","components_SortCell","String","fromCharCode","word","components_Cell","components_Table","tableData","_this$state","newData","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ffd1910.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__2oUTh\",\"tbody\":\"Table_tbody__3-WqC\",\"thead\":\"Table_thead__KW1ov\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__14icz\",\"editor\":\"Cell_editor__1IvCS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sortCell\":\"SortCell_sortCell__3vJ8N\",\"up\":\"SortCell_up__2tVP5\",\"down\":\"SortCell_down__3Z9aL\"};","import React from 'react';\r\nimport style from './Cell.module.css'\r\nexport interface Props {\r\n  view?: string,\r\n  value?: string,\r\n  onChange?: (nextValue?: string) => void,\r\n}\r\ntype State = {\r\n  EditMode: boolean,\r\n  editValue: string\r\n}\r\nclass Cell extends React.PureComponent<Props, State> {\r\n  wrapDom: HTMLDivElement | null = null\r\n  editorDom: HTMLInputElement | null = null\r\n  state = {\r\n    EditMode: false,\r\n    editValue: \"\",\r\n  }\r\n\r\n  enterEditMod = () => {\r\n    this.setState({\r\n      EditMode: true,\r\n      editValue: this.props.value || \"\"\r\n    }, () => {\r\n      window.addEventListener('click', this.addLeaveEditListener);\r\n      this.editorDom && this.editorDom.focus()\r\n    })\r\n  }\r\n\r\n  addLeaveEditListener = (e: MouseEvent) => {\r\n    if (this.wrapDom && !this.wrapDom.contains(e.target as Node)) {\r\n      this.leaveEditMod(true)\r\n    }\r\n  }\r\n\r\n  leaveEditMod = (needSaveValue: boolean) => {\r\n    const { onChange } = this.props\r\n    const { editValue: nextValue } = this.state\r\n    onChange && onChange(nextValue || this.props.value)\r\n    window.removeEventListener('click', this.addLeaveEditListener)\r\n    this.setState({\r\n      EditMode: false\r\n    })\r\n  }\r\n  onEditHandle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = e.target.value;\r\n    this.setState({\r\n      editValue: val\r\n    })\r\n  }\r\n  render() {\r\n    const { view } = this.props\r\n    return <div className={style.cell} onDoubleClick={this.enterEditMod} ref={el => this.wrapDom = el}>\r\n      {<CellEditor value={this.state.editValue}\r\n        onChange={this.onEditHandle}\r\n        visible={this.state.EditMode}\r\n        onConfirm={() => this.leaveEditMod(true)}\r\n        onCancel={() => this.leaveEditMod(false)}\r\n        inputRef={el => this.editorDom = el}\r\n      />}\r\n      {view}\r\n    </div>\r\n  }\r\n}\r\ninterface CellEditorProps {\r\n  visible: boolean,\r\n  value: string,\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n  onConfirm: () => void,\r\n  onCancel: () => void,\r\n  inputRef: React.Ref<any>,\r\n}\r\nfunction CellEditor({ visible, value, onChange, onConfirm, onCancel, inputRef }: CellEditorProps): React.ReactElement {\r\n  const keyDownHandle = (e: React.KeyboardEvent) => {\r\n    if (e.keyCode === 13) {\r\n      onConfirm()\r\n    }\r\n    if (e.keyCode === 27) {\r\n      onCancel()\r\n    }\r\n  }\r\n  return <input ref={inputRef} className={style.editor} type={visible ? 'text' : 'hidden'} value={value} onChange={onChange} onKeyDown={keyDownHandle} />\r\n}\r\n\r\nexport default Cell","import Cell from './Cell'\r\nexport default Cell","import React from 'react'\r\nimport style from './Table.module.css'\r\nexport interface Props {\r\n  columns: {\r\n    id: string,\r\n    thContent: React.ReactNode,\r\n    tdRender: (rowEle: any, rowIndex: number) => React.ReactNode\r\n  }[],\r\n  data: any[]\r\n}\r\n\r\nclass Table extends React.PureComponent<Props> {\r\n  render() {\r\n    let { columns, data } = this.props;\r\n    return (\r\n      <table className={style.table}>\r\n        <Thead columns={columns} />\r\n        <Tbody data={data} columns={columns} />\r\n      </table>\r\n    );\r\n  }\r\n}\r\nfunction Thead({ columns }: { columns: Props['columns'] }): React.ReactElement {\r\n  return <thead className={style.thead}>\r\n    <tr>\r\n      {\r\n        columns.map(column => (\r\n          <th key={column.id}>\r\n            {column.thContent}\r\n          </th>\r\n        ))\r\n      }\r\n    </tr >\r\n  </thead >\r\n}\r\nfunction Tbody({ data, columns }: Props): React.ReactElement {\r\n  return <tbody className={style.tbody}>\r\n    {data.map((rowEle, rowIndex) => (\r\n      <tr\r\n        key={rowIndex}\r\n        className={rowEle.className}\r\n      >\r\n        {columns.map(column => (\r\n          <td key={rowIndex + column.id}>\r\n            {column.tdRender(rowEle, rowIndex)}\r\n          </td>\r\n        ))}\r\n      </tr>\r\n    ))}\r\n  </tbody>\r\n}\r\nexport default Table","import Table from './Table'\r\nexport default Table","import React from 'react';\r\nimport style from './SortCell.module.css';\r\ntype direction = 'up' | 'down' | void\r\ninterface Props {\r\n  defaultValue?: direction,\r\n  onChange?: (direction: direction) => void\r\n}\r\ntype State = {\r\n  direction: direction\r\n}\r\nconst getNextDirection = (current: direction): direction => {\r\n  switch (current) {\r\n    case 'up':\r\n      return 'down';\r\n    case 'down':\r\n      return void 0;\r\n    case void 0:\r\n      return 'up'\r\n    default:\r\n      console.error('uncatch direction: ' + current)\r\n      return void 0\r\n\r\n  }\r\n}\r\nclass SortCell extends React.PureComponent<Props, State>{\r\n  constructor(props: Props) {\r\n    super(props)\r\n    this.state = {\r\n      direction: props.defaultValue\r\n    }\r\n  }\r\n\r\n  sortHandle = () => {\r\n    const nextDirection = getNextDirection(this.state.direction)\r\n    this.setState({\r\n      direction: nextDirection\r\n    })\r\n    const { onChange } = this.props;\r\n    onChange && onChange(nextDirection)\r\n  }\r\n\r\n  render() {\r\n    const { direction } = this.state\r\n    return <div className={`${style.sortCell} ${direction ? style[direction] : \"\"}`} onClick={this.sortHandle}>\r\n      {this.props.children}\r\n      <span></span>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default SortCell","import SortCell from './SortCell'\r\nexport default SortCell","type OperatorFuncs =\r\n  (a: number | string,\r\n    b: number | string) => number;\r\n\r\ntype Operator = '+'\r\n  | '-'\r\n  | '*'\r\n  | '/'\r\n  | '%'\r\n  | '^';\r\n\r\nconst operatorFunctions: {\r\n  '+': OperatorFuncs,\r\n  '-': OperatorFuncs,\r\n  '*': OperatorFuncs,\r\n  '/': OperatorFuncs,\r\n  '%': OperatorFuncs,\r\n  '^': OperatorFuncs\r\n} = {\r\n  '+': (a, b) => Number(a) + Number(b),\r\n  '-': (a, b) => Number(a) - Number(b),\r\n  '*': (a, b) => Number(a) * Number(b),\r\n  '/': (a, b) => Number(a) / Number(b),\r\n  '%': (a, b) => Number(a) % Number(b),\r\n  '^': (a, b) => Math.pow(Number(a), Number(b)),\r\n};\r\n\r\nfunction evalStr(str: string) {\r\n  const afterExpressArr = translateMidExpress2AfterExpressArr(str);\r\n  const stack = new Stack([]);\r\n  let i = 0;\r\n  let length = afterExpressArr.length;\r\n  while (i < length) {\r\n    const currentWord = afterExpressArr[i];\r\n    const currentType = checkWordType(currentWord);\r\n    if (currentType === 'number') {\r\n      stack.push(currentWord)\r\n    } else {\r\n      let top = stack.pop()\r\n      let top2 = stack.pop()\r\n      const result = operatorFunctions[currentWord as Operator](top2, top)\r\n      stack.push(result)\r\n    }\r\n    i++\r\n  }\r\n  return stack.top\r\n}\r\n\r\n/**\r\n * @description 转换中缀表达式为后缀表达式\r\n */\r\nfunction translateMidExpress2AfterExpressArr(str: string): string[] {\r\n  let arr = str.match(/((\\d|\\.)+|[^\\d|\\s])/g)\r\n  if (arr === null) {\r\n    return []\r\n  }\r\n  let i = 0;\r\n  let length = arr.length;\r\n  const stack = new Stack([]);\r\n  let afterExpressArr = []\r\n\r\n  while (i < length) {\r\n    const currentWord = arr[i];\r\n    switch (checkWordType(currentWord)) {\r\n      case 'number':\r\n        afterExpressArr.push(currentWord)\r\n        break;\r\n      case 'leftParentheses':\r\n        stack.push('(')\r\n        break;\r\n      case 'rightParentheses':\r\n        while (stack.top !== '(') {\r\n          const poped = stack.pop();\r\n          afterExpressArr.push(poped)\r\n        }\r\n        stack.pop();\r\n        break;\r\n      case 'operator':\r\n        let stackTop = stack.top;\r\n        if (stackTop === '(' || stack.length === 0) {\r\n          stack.push(currentWord)\r\n        } else {\r\n          stack.popUntil(stackOperator => isHigherPriority(currentWord, stackOperator) || stackOperator === '(').forEach(operator => afterExpressArr.push(operator))\r\n          stack.push(currentWord)\r\n        }\r\n        break;\r\n    }\r\n    i++;\r\n  }\r\n  while (stack.length) {\r\n    afterExpressArr.push(stack.pop())\r\n  }\r\n  return afterExpressArr\r\n}\r\n\r\nfunction checkWordType(str: string): string {\r\n  if (str === '(') {\r\n    return 'leftParentheses'\r\n  }\r\n  if (str === ')') {\r\n    return 'rightParentheses'\r\n  }\r\n  if (/^(\\d|\\.)+$/.test(str)) {\r\n    return 'number'\r\n  }\r\n  if (/^(\\+|-|\\*|\\/|%|\\^)$/.test(str)) {\r\n    return 'operator'\r\n  }\r\n  throw new Error('Error, Unknown Symbols: ' + str)\r\n}\r\n\r\n\r\n\r\nconst priorityMap = {\r\n  '+': 1,\r\n  '-': 1,\r\n  '*': 2,\r\n  '/': 2,\r\n  '%': 2,\r\n  '^': 3,\r\n}\r\nfunction isHigherPriority(a: string, b: string): boolean {\r\n  if (!priorityMap.hasOwnProperty(a) || !priorityMap.hasOwnProperty(b)) {\r\n    return false\r\n  }\r\n  if (priorityMap[a as Operator] > priorityMap[b as Operator]) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\n\r\nclass Stack {\r\n  stack: any[]\r\n  constructor(arr: any[]) {\r\n    this.stack = arr;\r\n\r\n  }\r\n  get top() {\r\n    const { stack } = this\r\n    return stack[stack.length - 1]\r\n  }\r\n  get length() {\r\n    const { stack } = this\r\n    return stack.length\r\n  }\r\n  get native() {\r\n    const { stack } = this\r\n    return stack\r\n  }\r\n  push = (...args: any[]) => this.stack.push.call(this.stack, ...args)\r\n  pop = () => this.stack.pop.call(this.stack)\r\n  get = (number: number) => this.stack[number];\r\n  popUntil = (func: (top: any) => boolean) => {\r\n    let poped = []\r\n    const { stack } = this\r\n    while (stack.length) {\r\n      if (!func(this.top)) {\r\n        poped.push(stack.pop())\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n    return poped\r\n  }\r\n}\r\nexport default evalStr","function sortGrid(grid: any[][], index: number, isRow: boolean, sortFunc: (arr: any[]) => any[]): any[][] {\r\n  let clonedGrid = JSON.parse(JSON.stringify(grid))\r\n  if (isRow) {\r\n    return sort(clonedGrid)\r\n  } else {\r\n    const newGrid = transpose(clonedGrid);\r\n    return transpose(sort(newGrid))\r\n  }\r\n\r\n  function sort(_grid: any[][]) {\r\n    _grid[index] = sortFunc(_grid[index])\r\n    return _grid\r\n  }\r\n}\r\n\r\nfunction transpose(grid: any[][]) {\r\n  const newGrid: any[][] = [];\r\n  grid[0].forEach(() => {\r\n    newGrid.push([])\r\n  });\r\n\r\n  for (var i = 0; i < grid.length; i++) {\r\n    for (var j = 0; j < grid[0].length; j++) {\r\n      newGrid[j][i] = grid[i][j];\r\n    }\r\n  }\r\n  return newGrid;\r\n\r\n}\r\n\r\nexport default sortGrid","import React from 'react';\r\nimport './App.css';\r\nimport Cell from './components/Cell';\r\nimport Table from './components/Table';\r\nimport SortCell from './components/SortCell';\r\nimport strEval from './tools/strEval';\r\nimport sortGrid from './tools/sortGrid';\r\ntype direction = 'up' | 'down' | void\r\ntype cellData = { value: String | void, view: String | void }\r\ntype State = {\r\n  data: cellData[][],\r\n  sortQueue: {\r\n    type: 'row' | 'column',\r\n    index: number,\r\n    func: (grid: cellData[][]) => cellData[][]\r\n  }[]\r\n}\r\nconst createEmptyGrid = () => Array(10).fill('').map(() =>\r\n  Array(10).fill('').map(() => ({\r\n    value: \"\",\r\n    view: \"\"\r\n  })))\r\n\r\nconst sortFuncs = {\r\n  'up': (arr: any[]) => {\r\n    const {\r\n      collect,\r\n      indexCollect\r\n    } = findUnEmpty([...arr]);\r\n    collect.sort((a, b) => a.view - b.view).forEach((ele, index) => {\r\n      arr[indexCollect[index]] = ele\r\n    })\r\n    return arr\r\n  },\r\n  'down': (arr: any[]) => {\r\n    const {\r\n      collect,\r\n      indexCollect\r\n    } = findUnEmpty([...arr]);\r\n    collect.sort((a, b) => b.view - a.view).forEach((ele, index) => {\r\n      arr[indexCollect[index]] = ele\r\n    })\r\n    return arr\r\n  },\r\n}\r\nfunction findUnEmpty(arr: any[]) {\r\n  const collect: any[] = [];\r\n  const indexCollect: number[] = [];\r\n  arr.forEach((ele, index) => {\r\n    if (ele.view !== \"\") {\r\n      collect.push(ele)\r\n      indexCollect.push(index)\r\n    }\r\n  })\r\n  return {\r\n    collect,\r\n    indexCollect\r\n  }\r\n}\r\nclass App extends React.PureComponent<{}, State> {\r\n  state: State = {\r\n    data: createEmptyGrid(),\r\n    sortQueue: [],\r\n  }\r\n\r\n  cellChangeHandle = (rowIndex: number, colIndex: number) => (nextVal: string | void) => {\r\n    this.changeData(rowIndex, colIndex, nextVal || \"\")\r\n  }\r\n  changeData = (x: number, y: number, val: string) => {\r\n    const { data } = this.state\r\n    data[x][y] = { value: val, view: dealValue2View(val) }\r\n    this.setState({\r\n      data: [...data]\r\n    })\r\n  }\r\n  onSort = (index: number, isRow: boolean) => (direction: direction) => {\r\n    const { sortQueue } = this.state;\r\n    const sortType = isRow ? 'row' : 'column'\r\n    const findedIndex = sortQueue.findIndex(ele => ele.type === sortType && ele.index === index)\r\n    if (!direction) {\r\n      sortQueue.splice(findedIndex, 1)\r\n    } else {\r\n      const nextSortItem = {\r\n        type: sortType as 'row' | 'column',\r\n        index: index,\r\n        func: (grid: any[][]) => sortGrid(grid, index, isRow, sortFuncs[direction as 'up' | 'down'])\r\n      }\r\n      if (findedIndex >= 0) {\r\n        sortQueue[findedIndex] = nextSortItem\r\n      } else {\r\n        sortQueue.push(nextSortItem)\r\n      }\r\n    }\r\n    this.setState({\r\n      sortQueue: [...sortQueue]\r\n    })\r\n  }\r\n\r\n  columns = [\r\n    {\r\n      id: 'empty',\r\n      thContent: null,\r\n      tdRender: (rowEle: State[\"data\"][], rowIndex: number) => <SortCell onChange={this.onSort(rowIndex, true)}>{String(rowIndex + 1)}</SortCell>\r\n    },\r\n    ...Array(10).fill(0)\r\n      .map((ele, index) => String.fromCharCode(65 + index))\r\n      .map((word, colIndex) => {\r\n        const tdRender = (rowEle: cellData[], rowIndex: number) =>\r\n          (<Cell\r\n            view={String(rowEle[colIndex].view)}\r\n            value={String(rowEle[colIndex].value)}\r\n            onChange={this.cellChangeHandle(rowIndex, colIndex)}\r\n          />)\r\n        return {\r\n          id: word,\r\n          thContent: <SortCell onChange={this.onSort(colIndex, false)}>{word}</SortCell>,\r\n          tdRender: tdRender\r\n        }\r\n      })\r\n  ]\r\n  get tableData() {\r\n    const { data, sortQueue } = this.state;\r\n    let newData = data\r\n    sortQueue.forEach(({ func }) => {\r\n      newData = func(newData)\r\n    })\r\n    return newData\r\n  }\r\n  render() {\r\n    return <Table data={this.tableData} columns={this.columns} />\r\n\r\n  }\r\n}\r\n\r\nfunction dealValue2View(value: string): string {\r\n  if (/^=/.test(value)) {\r\n    try {\r\n      return strEval(value.substr(1))\r\n    } catch (error) {\r\n      console.error(error)\r\n      return value\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}